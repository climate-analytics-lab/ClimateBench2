#!/bin/bash
##############################################################################
# ESGF wget download script
#
# Template version: 0.4
# Generated by nimbus.llnl.gov - 2025/08/08 13:37:15
# Search URL: http://nimbus.llnl.gov/wget
# Request method: POST
# 
###############################################################################
# first be sure it's bash... anything out of bash or sh will break
# and the test will assure we are not using sh instead of bash
if [ $BASH ] && [ `basename $BASH` != bash ]; then
    echo "######## This is a bash script! ##############" 
    echo "Change the execution bit 'chmod u+x $0' or start with 'bash $0' instead of sh."
    echo "Trying to recover automatically..."
    sleep 1
    /bin/bash $0 $@
    exit $?
fi

version=0.4
CACHE_FILE=.$(basename $0).status
search_url='http://nimbus.llnl.gov/wget'
request_method='POST'
url_params=(
    'CMIP6.PMIP.MPI-M.MPI-ESM1-2-LR.lgm.r1i1p1f1.Amon.tas.gn.v20190710|esgf-node.ornl.gov'
)

#These are the embedded files to be downloaded
download_files="$(cat <<EOF--dataset.file.url.chksum_type.chksum
'MPI-ESM1-2-LR/tas_Amon_MPI-ESM1-2-LR_lgm_r1i1p1f1_gn_223001-224912.nc' 'https://esgf-node.ornl.gov/thredds/fileServer/css03_data/CMIP6/PMIP/MPI-M/MPI-ESM1-2-LR/lgm/r1i1p1f1/Amon/tas/gn/v20190710/tas_Amon_MPI-ESM1-2-LR_lgm_r1i1p1f1_gn_223001-224912.nc' 'SHA256' 'af5d2b47b44160ed5ccb0a7db8a81694456c7c321dbd8b719be56aafc490ac0a'
'MPI-ESM1-2-LR/tas_Amon_MPI-ESM1-2-LR_lgm_r1i1p1f1_gn_203001-204912.nc' 'https://esgf-node.ornl.gov/thredds/fileServer/css03_data/CMIP6/PMIP/MPI-M/MPI-ESM1-2-LR/lgm/r1i1p1f1/Amon/tas/gn/v20190710/tas_Amon_MPI-ESM1-2-LR_lgm_r1i1p1f1_gn_203001-204912.nc' 'SHA256' '06478b12ccaa7f4cf411c388612c1e6613becdab98c5ca55ec997926f49cb37e'
'MPI-ESM1-2-LR/tas_Amon_MPI-ESM1-2-LR_lgm_r1i1p1f1_gn_219001-220912.nc' 'https://esgf-node.ornl.gov/thredds/fileServer/css03_data/CMIP6/PMIP/MPI-M/MPI-ESM1-2-LR/lgm/r1i1p1f1/Amon/tas/gn/v20190710/tas_Amon_MPI-ESM1-2-LR_lgm_r1i1p1f1_gn_219001-220912.nc' 'SHA256' '46df9a60a6fccba119493a105eb89d269241f2f03e984c230f5204b3cd800984'
'MPI-ESM1-2-LR/tas_Amon_MPI-ESM1-2-LR_lgm_r1i1p1f1_gn_233001-234912.nc' 'https://esgf-node.ornl.gov/thredds/fileServer/css03_data/CMIP6/PMIP/MPI-M/MPI-ESM1-2-LR/lgm/r1i1p1f1/Amon/tas/gn/v20190710/tas_Amon_MPI-ESM1-2-LR_lgm_r1i1p1f1_gn_233001-234912.nc' 'SHA256' '7d72da6af20f47cf2d44250383c03ad4289776a43b52408d4bf82b1af64048cc'
'MPI-ESM1-2-LR/tas_Amon_MPI-ESM1-2-LR_lgm_r1i1p1f1_gn_191001-192912.nc' 'https://esgf-node.ornl.gov/thredds/fileServer/css03_data/CMIP6/PMIP/MPI-M/MPI-ESM1-2-LR/lgm/r1i1p1f1/Amon/tas/gn/v20190710/tas_Amon_MPI-ESM1-2-LR_lgm_r1i1p1f1_gn_191001-192912.nc' 'SHA256' 'cb77dcb6fed865f3e72127eb66e3f924fd47307a5acf58e6ad9696570cc9902f'
'MPI-ESM1-2-LR/tas_Amon_MPI-ESM1-2-LR_lgm_r1i1p1f1_gn_195001-196912.nc' 'https://esgf-node.ornl.gov/thredds/fileServer/css03_data/CMIP6/PMIP/MPI-M/MPI-ESM1-2-LR/lgm/r1i1p1f1/Amon/tas/gn/v20190710/tas_Amon_MPI-ESM1-2-LR_lgm_r1i1p1f1_gn_195001-196912.nc' 'SHA256' '7201cf1112fd4955d6773debfd861a0655766b059ec583dea7f06d85a72ece99'
'MPI-ESM1-2-LR/tas_Amon_MPI-ESM1-2-LR_lgm_r1i1p1f1_gn_227001-228912.nc' 'https://esgf-node.ornl.gov/thredds/fileServer/css03_data/CMIP6/PMIP/MPI-M/MPI-ESM1-2-LR/lgm/r1i1p1f1/Amon/tas/gn/v20190710/tas_Amon_MPI-ESM1-2-LR_lgm_r1i1p1f1_gn_227001-228912.nc' 'SHA256' '2de0c1cf1aa88f55e2afc41535a299a6f85d9e0f5a6a49baf00d62f6ff35317c'
'MPI-ESM1-2-LR/tas_Amon_MPI-ESM1-2-LR_lgm_r1i1p1f1_gn_207001-208912.nc' 'https://esgf-node.ornl.gov/thredds/fileServer/css03_data/CMIP6/PMIP/MPI-M/MPI-ESM1-2-LR/lgm/r1i1p1f1/Amon/tas/gn/v20190710/tas_Amon_MPI-ESM1-2-LR_lgm_r1i1p1f1_gn_207001-208912.nc' 'SHA256' '2eb31836dc913c6c15bfb2db97f13e1c1635832d5e363d46e29b7a4e4212d9f5'
'MPI-ESM1-2-LR/tas_Amon_MPI-ESM1-2-LR_lgm_r1i1p1f1_gn_213001-214912.nc' 'https://esgf-node.ornl.gov/thredds/fileServer/css03_data/CMIP6/PMIP/MPI-M/MPI-ESM1-2-LR/lgm/r1i1p1f1/Amon/tas/gn/v20190710/tas_Amon_MPI-ESM1-2-LR_lgm_r1i1p1f1_gn_213001-214912.nc' 'SHA256' '6c63848ec32997a82e49323aa61182049552a9ad1b4e946d882a4180204bf77e'
'MPI-ESM1-2-LR/tas_Amon_MPI-ESM1-2-LR_lgm_r1i1p1f1_gn_201001-202912.nc' 'https://esgf-node.ornl.gov/thredds/fileServer/css03_data/CMIP6/PMIP/MPI-M/MPI-ESM1-2-LR/lgm/r1i1p1f1/Amon/tas/gn/v20190710/tas_Amon_MPI-ESM1-2-LR_lgm_r1i1p1f1_gn_201001-202912.nc' 'SHA256' '605114d0ba6c5c8dd611fc775cabb4f9ce236c9466defa8a19dfdf3de546f457'
'MPI-ESM1-2-LR/tas_Amon_MPI-ESM1-2-LR_lgm_r1i1p1f1_gn_215001-216912.nc' 'https://esgf-node.ornl.gov/thredds/fileServer/css03_data/CMIP6/PMIP/MPI-M/MPI-ESM1-2-LR/lgm/r1i1p1f1/Amon/tas/gn/v20190710/tas_Amon_MPI-ESM1-2-LR_lgm_r1i1p1f1_gn_215001-216912.nc' 'SHA256' 'b6628c5f6febfc297e9ddda549fb926337d75d084f9ae294a3d73dc46433e3b3'
'MPI-ESM1-2-LR/tas_Amon_MPI-ESM1-2-LR_lgm_r1i1p1f1_gn_193001-194912.nc' 'https://esgf-node.ornl.gov/thredds/fileServer/css03_data/CMIP6/PMIP/MPI-M/MPI-ESM1-2-LR/lgm/r1i1p1f1/Amon/tas/gn/v20190710/tas_Amon_MPI-ESM1-2-LR_lgm_r1i1p1f1_gn_193001-194912.nc' 'SHA256' 'c2c4d8ab5ed60d0acc6bfdd0e0de47b45e1bb1197bbc8affd38bb2e689903521'
'MPI-ESM1-2-LR/tas_Amon_MPI-ESM1-2-LR_lgm_r1i1p1f1_gn_205001-206912.nc' 'https://esgf-node.ornl.gov/thredds/fileServer/css03_data/CMIP6/PMIP/MPI-M/MPI-ESM1-2-LR/lgm/r1i1p1f1/Amon/tas/gn/v20190710/tas_Amon_MPI-ESM1-2-LR_lgm_r1i1p1f1_gn_205001-206912.nc' 'SHA256' 'd3b9eb7b20b14fc16e62fc7e60adb83319bed5bda794e847ac8e8834b3546a87'
'MPI-ESM1-2-LR/tas_Amon_MPI-ESM1-2-LR_lgm_r1i1p1f1_gn_189001-190912.nc' 'https://esgf-node.ornl.gov/thredds/fileServer/css03_data/CMIP6/PMIP/MPI-M/MPI-ESM1-2-LR/lgm/r1i1p1f1/Amon/tas/gn/v20190710/tas_Amon_MPI-ESM1-2-LR_lgm_r1i1p1f1_gn_189001-190912.nc' 'SHA256' 'a0fbdba0c2837e079158501ad2f68ce793fcc38ed04362e708c4ee2dfb45ed5a'
'MPI-ESM1-2-LR/tas_Amon_MPI-ESM1-2-LR_lgm_r1i1p1f1_gn_187001-188912.nc' 'https://esgf-node.ornl.gov/thredds/fileServer/css03_data/CMIP6/PMIP/MPI-M/MPI-ESM1-2-LR/lgm/r1i1p1f1/Amon/tas/gn/v20190710/tas_Amon_MPI-ESM1-2-LR_lgm_r1i1p1f1_gn_187001-188912.nc' 'SHA256' 'be4efa16221c09137e82ea22ad3829769b6cce37ec7a8988509ac231219154e4'
'MPI-ESM1-2-LR/tas_Amon_MPI-ESM1-2-LR_lgm_r1i1p1f1_gn_221001-222912.nc' 'https://esgf-node.ornl.gov/thredds/fileServer/css03_data/CMIP6/PMIP/MPI-M/MPI-ESM1-2-LR/lgm/r1i1p1f1/Amon/tas/gn/v20190710/tas_Amon_MPI-ESM1-2-LR_lgm_r1i1p1f1_gn_221001-222912.nc' 'SHA256' 'bb099587148b6cb98569abdf7616648f7e5d1de55a59914591e9172fe32b4bdf'
'MPI-ESM1-2-LR/tas_Amon_MPI-ESM1-2-LR_lgm_r1i1p1f1_gn_229001-230912.nc' 'https://esgf-node.ornl.gov/thredds/fileServer/css03_data/CMIP6/PMIP/MPI-M/MPI-ESM1-2-LR/lgm/r1i1p1f1/Amon/tas/gn/v20190710/tas_Amon_MPI-ESM1-2-LR_lgm_r1i1p1f1_gn_229001-230912.nc' 'SHA256' 'ac2db21b7da4b6374dd7c7974741ec8b9f2b576892f80bcfdf20047afd3ed40f'
'MPI-ESM1-2-LR/tas_Amon_MPI-ESM1-2-LR_lgm_r1i1p1f1_gn_199001-200912.nc' 'https://esgf-node.ornl.gov/thredds/fileServer/css03_data/CMIP6/PMIP/MPI-M/MPI-ESM1-2-LR/lgm/r1i1p1f1/Amon/tas/gn/v20190710/tas_Amon_MPI-ESM1-2-LR_lgm_r1i1p1f1_gn_199001-200912.nc' 'SHA256' '3493470f0105d059b24ee7f2afbb3dd0ca9c1eb037a17f8c4c6d6b785066e51d'
'MPI-ESM1-2-LR/tas_Amon_MPI-ESM1-2-LR_lgm_r1i1p1f1_gn_185001-186912.nc' 'https://esgf-node.ornl.gov/thredds/fileServer/css03_data/CMIP6/PMIP/MPI-M/MPI-ESM1-2-LR/lgm/r1i1p1f1/Amon/tas/gn/v20190710/tas_Amon_MPI-ESM1-2-LR_lgm_r1i1p1f1_gn_185001-186912.nc' 'SHA256' '0b42b99bbef08c521b74b5d96003e7001cc7347b891319da65574f76cecd8f1b'
'MPI-ESM1-2-LR/tas_Amon_MPI-ESM1-2-LR_lgm_r1i1p1f1_gn_211001-212912.nc' 'https://esgf-node.ornl.gov/thredds/fileServer/css03_data/CMIP6/PMIP/MPI-M/MPI-ESM1-2-LR/lgm/r1i1p1f1/Amon/tas/gn/v20190710/tas_Amon_MPI-ESM1-2-LR_lgm_r1i1p1f1_gn_211001-212912.nc' 'SHA256' '40e9f246ab03721fb6865945be41b492dc047ce225841a51ce51475aa1b0d2a5'
'MPI-ESM1-2-LR/tas_Amon_MPI-ESM1-2-LR_lgm_r1i1p1f1_gn_225001-226912.nc' 'https://esgf-node.ornl.gov/thredds/fileServer/css03_data/CMIP6/PMIP/MPI-M/MPI-ESM1-2-LR/lgm/r1i1p1f1/Amon/tas/gn/v20190710/tas_Amon_MPI-ESM1-2-LR_lgm_r1i1p1f1_gn_225001-226912.nc' 'SHA256' '4d431145208c86e942b35a28f4b84b270b4899b2d6b54abc799aa1ae7a6737d4'
'MPI-ESM1-2-LR/tas_Amon_MPI-ESM1-2-LR_lgm_r1i1p1f1_gn_231001-232912.nc' 'https://esgf-node.ornl.gov/thredds/fileServer/css03_data/CMIP6/PMIP/MPI-M/MPI-ESM1-2-LR/lgm/r1i1p1f1/Amon/tas/gn/v20190710/tas_Amon_MPI-ESM1-2-LR_lgm_r1i1p1f1_gn_231001-232912.nc' 'SHA256' '1f67700673c4cfca73a6c6c442c65683aa1b82009f3eab5cbba510d95a4033c4'
'MPI-ESM1-2-LR/tas_Amon_MPI-ESM1-2-LR_lgm_r1i1p1f1_gn_197001-198912.nc' 'https://esgf-node.ornl.gov/thredds/fileServer/css03_data/CMIP6/PMIP/MPI-M/MPI-ESM1-2-LR/lgm/r1i1p1f1/Amon/tas/gn/v20190710/tas_Amon_MPI-ESM1-2-LR_lgm_r1i1p1f1_gn_197001-198912.nc' 'SHA256' '990f2c28bc486b699d19b13232a9dd7bc2f50c6f7f66e70b3df5fb38ad1824a2'
'MPI-ESM1-2-LR/tas_Amon_MPI-ESM1-2-LR_lgm_r1i1p1f1_gn_209001-210912.nc' 'https://esgf-node.ornl.gov/thredds/fileServer/css03_data/CMIP6/PMIP/MPI-M/MPI-ESM1-2-LR/lgm/r1i1p1f1/Amon/tas/gn/v20190710/tas_Amon_MPI-ESM1-2-LR_lgm_r1i1p1f1_gn_209001-210912.nc' 'SHA256' '235a0536897fca72cb4b682eeb54e4606fd66b79fed45e328e053bda77a3479f'
'MPI-ESM1-2-LR/tas_Amon_MPI-ESM1-2-LR_lgm_r1i1p1f1_gn_217001-218912.nc' 'https://esgf-node.ornl.gov/thredds/fileServer/css03_data/CMIP6/PMIP/MPI-M/MPI-ESM1-2-LR/lgm/r1i1p1f1/Amon/tas/gn/v20190710/tas_Amon_MPI-ESM1-2-LR_lgm_r1i1p1f1_gn_217001-218912.nc' 'SHA256' '710ef3b26960a0a7030faad907e3a45dc3caccc3504dae43f25c709b8101d7cf'
EOF--dataset.file.url.chksum_type.chksum
)"

check_os() {
    local os_name=$(uname | awk '{print $1}')
    case ${os_name} in
        Linux)
            ((debug)) && echo "Linux operating system detected"
            LINUX=1
            MACOSX=0
            ;;
        Darwin)
            ((debug)) && echo "Mac OS X operating system detected"
            LINUX=0
            MACOSX=1
            ;;
        *)
            echo "Unrecognized OS [${os_name}]"
            return 1
            ;;
    esac
    return 0
}

#taken from http://stackoverflow.com/a/4025065/1182464
vercomp () {
    if [[ $1 == $2 ]]
    then
        return 0
    fi
    local IFS=.
    local i ver1=($1) ver2=($2)
    # fill empty fields in ver1 with zeros
    for ((i=${#ver1[@]}; i<${#ver2[@]}; i++))
    do
        ver1[i]=0
    done
    for ((i=0; i<${#ver1[@]}; i++))
    do
        if [[ -z ${ver2[i]} ]]
        then
            # fill empty fields in ver2 with zeros
            ver2[i]=0
        fi
        if ((10#${ver1[i]} > 10#${ver2[i]}))
        then
            return 1
        fi
        if ((10#${ver1[i]} < 10#${ver2[i]}))
        then
            return 2
        fi
    done
    return 0
}

check_commands() {
    #check wget
    local MIN_WGET_VERSION=1.10
    vercomp $(wget -V | sed -n 's/^.* \([1-9]\.[0-9.]*\) .*$/\1/p') $MIN_WGET_VERSION
    case $? in
        2) #lower
            wget -V
            echo
            echo "** ERROR: wget version is too old. Use version $MIN_WGET_VERSION or greater. **" >&2
            exit 1
    esac
}

usage() {
    echo "Usage: $(basename $0) [flags]"
    echo "Flags is one of:"
    sed -n '/^while getopts/,/^done/  s/^\([^)]*\)[^#]*#\(.*$\)/\1 \2/p' $0
    echo
    echo "This command stores the states of the downloads in .$0.status"
}

#defaults
debug=0
clean_work=1

#parse flags
while getopts 'F:w:iuUnSpdvqh' OPT; do
    case $OPT in
        F) input_file="$OPTARG";;       #<file> : read input from file instead of the embedded one (use - to read from stdin)
        w) output="$OPTARG";;           #<file> : Write embedded files into a file and exit
        i) insecure=1;;                 #       : set insecure mode, i.e. don't check server certificate
        u) update=1;;                   #       : Issue the search again and see if something has changed.
        U) update_files=1;;             #       : Update files from server overwriting local ones (detect with -u)
        n) dry_run=1;;                  #       : Don't download any files, just report.
        S) skip_checksum=1;;            #       : Skip file checksum
        p) clean_work=0;;               #       : preserve data that failed checksum
        d) verbose=1;debug=1;;          #       : display debug information
        v) verbose=1;;                  #       : be more verbose
        q) quiet=1;;                    #       : be less verbose
        h) usage && exit 0;;            #       : displays this help
        \?) echo "Unknown option '$OPTARG'" >&2 && usage && exit 1;;
        \:) echo "Missing parameter for flag '$OPTARG'" >&2 && usage && exit 1;;
    esac
done
shift $(($OPTIND - 1))

#setup input as desired by the user
if [[ "$input_file" ]]; then
    if [[ "$input_file" == '-' ]]; then
        download_files="$(cat)" #read from STDIN
        exec 0</dev/tty #reopen STDIN as cat closed it
    else
        download_files="$(cat $input_file)" #read from file
    fi
fi

#if -w (output) was selected write file and finish:
if [[ "$output" ]]; then
    #check the file
    if [[ -f "$output" ]]; then
        read -p "Overwrite existing file $output? (y/N) " answ
        case $answ in y|Y|yes|Yes);; *) echo "Aborting then..."; exit 0;; esac
    fi
    echo "$download_files">$output
    exit
fi

#assure we have everything we need
check_commands

if ((update)); then
    echo "Checking the server for changes..."
    post_data=$(IFS="&" ; echo "${url_params[*]}")
    new_wget="$(wget --post-data "$post_data" "$search_url" -qO -)"
    compare_cmd="grep -vE '^(# Generated by|# Search URL|search_url=)'"
    if diff -q <(eval $compare_cmd<<<"$new_wget") <(eval $compare_cmd $0) >/dev/null; then
        echo "No changes detected."
    else
        echo "Wget was changed. Dowloading. (old renamed to $0.old.#N)"
        counter=0
        while [[ -f $0.old.$counter ]]; do ((counter++)); done
        mv $0 $0.old.$counter
        echo "$new_wget" > $0
    fi
    exit 0      
fi

check_chksum() {
    local file="$1"
    local chk_type=$2
    local chk_value=$3
    local local_chksum=Unknown

    case $chk_type in
        md5) local_chksum=$(md5sum_ $file | cut -f1 -d" ");;
        sha256) local_chksum=$(sha256sum_ $file|awk '{print $1}'|cut -d ' ' -f1);;
        *) echo "Can't verify checksum." && return 0;;
    esac

    #verify
    ((debug)) && echo "local:$local_chksum vs remote:$chk_value" >&2
    echo $local_chksum
}

#Our own md5sum function call that takes into account machines that don't have md5sum but do have md5 (i.e. mac os x)
md5sum_() {
    hash -r
    if type md5sum >& /dev/null; then
        echo $(md5sum $@)
    else
        echo $(md5 $@ | sed -n 's/MD5[ ]*\(.*\)[^=]*=[ ]*\(.*$\)/\2 \1/p')
    fi
}

#Our own sha256sum function call that takes into account machines that don't have sha256sum but do have sha2 (i.e. mac os x)
sha256sum_() {
    hash -r
    if type sha256sum >& /dev/null; then
        echo $(sha256sum $@)
    elif type shasum >& /dev/null; then
        echo $(shasum -a 256 $@)
    else
        echo $(sha2 -q -256 $@)
    fi
}

get_mod_time_() {
    if ((MACOSX)); then
        #on a mac modtime is stat -f %m <file>
        echo "$(stat -f %m $@)"
    else
        #on linux (cygwin) modtime is stat -c %Y <file>
        echo "$(stat -c %Y $@)"
    fi
    return 0;
}

remove_from_cache() {
    local entry="$1"
    local tmp_file="$(grep -ve "^$entry" "$CACHE_FILE")"
    echo "$tmp_file" > "$CACHE_FILE"
    unset cached
}

download() {
    wget="wget ${insecure:+--no-check-certificate} ${quiet:+-q} ${quiet:--v}"
    
    while read line
    do
        # read csv here document into proper variables
        eval $(awk -F "' '" '{$0=substr($0,2,length($0)-2); $3=tolower($3); print "file=\""$1"\";url=\""$2"\";chksum_type=\""$3"\";chksum=\""$4"\""}' <(echo $line) )

        #Process the file
        echo -n "$file ..."

        #get the cached entry if any.
        cached="$(grep -e "^$file" "$CACHE_FILE")"
        
        #if we have the cache entry but no file, clean it.
        if [[ ! -f $file && "$cached" ]]; then
            #the file was removed, clean the cache
            remove_from_cache "$file"
            unset cached
        fi
        
        #check it wasn't modified
        if [[ -n "$cached" && "$(get_mod_time_ $file)" == $(echo "$cached" | cut -d ' ' -f2) ]]; then
                    if [[ "$chksum" == "$(echo "$cached" | cut -d ' ' -f3)" ]]; then
                echo "Already downloaded and verified"
                continue
            elif ((update_files)); then
                #user want's to overwrite newer files
                rm $file
                remove_from_cache "$file"
                unset cached
            else
                #file on server is different from what we have. 
                echo "WARNING: The remote file was changed (probably a new version is available). Use -U to Update/overwrite"
                continue
            fi
        fi
        unset chksum_err_value chksum_err_count

        while : ; do
            # (if we had the file size, we could check before trying to complete)
            echo "Downloading"
            [[ ! -d "$(dirname "$file")" ]] && mkdir -p "$(dirname "$file")"
            if ((dry_run)); then
                #all important info was already displayed, if in dry_run mode just abort
                #No status will be stored
                break
            else
                $wget -O "$file" $url || { failed=1; break; }  
            fi

            #check if file is there
            if [[ -f $file ]]; then
                ((debug)) && echo file found
                if ((skip_checksum)); then
                    echo "Skipping check of file checksum"
                    break
                fi
                if [[ ! "$chksum" ]]; then
                    echo "Checksum not provided, can't verify file integrity"
                    break
                fi
                result_chksum=$(check_chksum "$file" $chksum_type $chksum)
                if [[ "$result_chksum" != "$chksum" ]]; then
                    echo "  $chksum_type failed!"
                    if ((clean_work)); then
                        if !((chksum_err_count)); then
                                chksum_err_value=$result_chksum
                                chksum_err_count=2
                            elif ((checksum_err_count--)); then
                                if [[ "$result_chksum" != "$chksum_err_value" ]]; then
                                    #this is a real transmission problem
                                    chksum_err_value=$result_chksum
                                    chksum_err_count=2
                                fi
                            else
                                #ok if here we keep getting the same "different" checksum
                                echo "The file returns always a different checksum!"
                                echo "Contact the data owner to verify what is happening."
                                echo
                                sleep 1
                                break
                            fi
                        
                            rm $file
                            #try again
                            echo -n "  re-trying..."
                            continue
                    else
                            echo "  don't use -p or remove manually."
                    fi
                else
                    echo "  $chksum_type ok. done!"
                    echo "$file" $(get_mod_time_ "$file") $chksum >> $CACHE_FILE
                fi
            fi
            #done!
            break
        done
        
        if ((failed)); then
            echo "download failed"
            unset failed
        fi
        
    done <<<"$download_files"

}

dedup_cache_() {
    local file=${1:-${CACHE_FILE}}
    ((debug)) && echo "dedup'ing cache ${file} ..."
    local tmp=$(LC_ALL='C' sort  -r -k1,2 $file | awk '!($1 in a) {a[$1];print $0}' | sort -k2,2)
    ((DEBUG)) && echo "$tmp"
    echo "$tmp" > $file
    ((debug)) && echo "(cache dedup'ed)"
}

#do we have old results? Create the file if not
[ ! -f $CACHE_FILE ] && echo "#filename mtime checksum" > $CACHE_FILE && chmod 666 $CACHE_FILE

#
# MAIN
#

echo "Running $(basename $0) version: $version"
((verbose)) && echo "we use other tools in here, don't try to user their proposed 'options' directly"
echo "Use $(basename $0) -h for help."$'\n'

cat <<'EOF-MESSAGE'
Script created for 25 file(s)
(The count won't match if you manually edit this file!)

EOF-MESSAGE
sleep 1

check_os

download

dedup_cache_

echo "done"
